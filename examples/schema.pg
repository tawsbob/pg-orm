// PG-ORM Schema Definition Example

config {
  url      = env("DATABASE_URL")
}

model User {
  id        Serial     @id
  email     String     @unique
  name      String?
  role      UserRole   @default(USER)
  posts     Post[]
  profile   Profile?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@index([email], type: GIN)
  @@rls(using: "role != 'ADMIN'", check: "id = auth.user_id()")
}

model Profile {
  id        Serial     @id
  bio       String?
  avatar    String?
  user      User       @relation(fields: [userId], references: [id])
  userId    Int        @unique
  location  Geography? @postgis.Point(4326)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@index([location], type: GIST)
}

model Post {
  id        Serial     @id
  title     String
  content   String?
  published Boolean    @default(false)
  author    User       @relation(fields: [authorId], references: [id])
  authorId  Int
  tags      Tag[]      @relation("PostToTag")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  
  @@index([title], type: GIN, opclass: "gin_trgm_ops")
  @@index([content], type: GIN, opclass: "gin_trgm_ops") @where("content IS NOT NULL")
  
  // Define table partitioning (PostgreSQL specific)
  @@partition(type: RANGE, by: [createdAt])
  @@createPartition(name: "posts_2023", values: ["2023-01-01", "2024-01-01"])
  @@createPartition(name: "posts_2024", values: ["2024-01-01", "2025-01-01"])
}

model Tag {
  id    Serial   @id
  name  String   @unique
  posts Post[]   @relation("PostToTag")
  
  @@index([name], type: BTREE)
}

enum UserRole {
  USER
  EDITOR
  ADMIN
}

// Define a PostgreSQL enum type
enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  
  @@pg.enum
}

// Define a custom composite type
type Address {
  street  String
  city    String
  state   String
  zip     String
  country String

  @@pg.type
}

// Define a custom domain
type Email String {
  @@pg.domain
  @@pg.check("VALUE ~ '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$'")
}

// Define a view
view ActiveUsers {
  id    Int
  email String
  name  String

  @@pg.sql("SELECT id, email, name FROM \"User\" WHERE \"lastLoginAt\" > NOW() - INTERVAL '30 days'")
}

// Define a materialized view
view PostStats @materialized {
  authorId      Int
  authorName    String
  postCount     Int
  avgPostLength Float

  @@pg.sql("SELECT u.id as \"authorId\", u.name as \"authorName\", COUNT(p.id) as \"postCount\", AVG(LENGTH(p.content)) as \"avgPostLength\" FROM \"User\" u JOIN \"Post\" p ON u.id = p.\"authorId\" GROUP BY u.id, u.name")
  @@pg.index(fields: [authorId], type: BTREE)
} 